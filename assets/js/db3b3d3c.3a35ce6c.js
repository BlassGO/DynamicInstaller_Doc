"use strict";(self.webpackChunkdynamic_installer_doc=self.webpackChunkdynamic_installer_doc||[]).push([[461],{5299:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"fundamentals/variables","title":"\ud83d\udd27 Variables","description":"Learn the basics of defining, using, and checking variables.","source":"@site/docs/fundamentals/variables.md","sourceDirName":"fundamentals","slug":"/fundamentals/variables","permalink":"/DynamicInstaller_Doc/docs/fundamentals/variables","draft":false,"unlisted":false,"editUrl":"https://github.com/BlassGO/DynamicInstaller_Doc/edit/main/docs/fundamentals/variables.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"id":"variables","title":"\ud83d\udd27 Variables","description":"Learn the basics of defining, using, and checking variables."},"sidebar":"tutorialSidebar","previous":{"title":"Fundamentals","permalink":"/DynamicInstaller_Doc/docs/category/fundamentals"},"next":{"title":"\ud83c\udf10 Native Variables","permalink":"/DynamicInstaller_Doc/docs/fundamentals/native-variables"}}');var a=i(4848),r=i(8453);const l={sidebar_position:1,id:"variables",title:"\ud83d\udd27 Variables",description:"Learn the basics of defining, using, and checking variables."},t="\ud83d\udd27 Variables",d={},c=[{value:"Defining Variables",id:"defining-variables",level:2},{value:"Examples",id:"examples",level:3},{value:"Using Variables",id:"using-variables",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Avoiding Confusion with Braces",id:"avoiding-confusion-with-braces",level:3},{value:"Checking If Variables Are Defined",id:"checking-if-variables-are-defined",level:2},{value:"defined",id:"defined",level:3},{value:"undefined",id:"undefined",level:3},{value:"Practical Example",id:"practical-example",level:3}];function o(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"-variables",children:"\ud83d\udd27 Variables"})}),"\n",(0,a.jsx)(n.p,{children:"Variables let you store and reuse information. This guide covers how to create variables, use their values, and check if they exist."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"defining-variables",children:"Defining Variables"}),"\n",(0,a.jsxs)(n.p,{children:["To create a variable, use the ",(0,a.jsx)(n.code,{children:"="})," symbol with no spaces around it. Here's the basic syntax:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'VARIABLE_NAME="VALUE"\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:'Variable names are case-sensitive ("a" and "A" are distinct).'}),"\n",(0,a.jsx)(n.li,{children:'Names must start with an alphabetic character or "_" (e.g., "A", "__A"). Starting with numbers (e.g., "90", "90__MyVar") is invalid.'}),"\n",(0,a.jsx)(n.li,{children:'After the first character, names can include letters, numbers, or "_" (e.g., "MyVar__90").'}),"\n"]})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["Avoid using variable names starting with ",(0,a.jsx)(n.code,{children:"___"})," (three underscores). This prefix is reserved for provisional environment variables used internally by DI. Using it in your scripts may cause conflicts or data loss."]})}),"\n",(0,a.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'a="Ole"\r\nA="Just test"\r\nA10="a b c d e"\r\n_A="1 2 3 4 5"\r\nB_="W e l c o m e !"\r\nB_1_2_3="-------------------------"\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Always enclose the value in quotes (",(0,a.jsx)(n.code,{children:'"'}),") to handle spaces or special characters safely."]})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"using-variables",children:"Using Variables"}),"\n",(0,a.jsxs)(n.p,{children:["To use a variable\u2019s value, add a ",(0,a.jsx)(n.code,{children:"$"})," before its name. This tells the script to replace ",(0,a.jsx)(n.code,{children:"$VARIABLE_NAME"})," with its stored value."]}),"\n",(0,a.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'greeting="Hello"\r\nui_print "$greeting everyone"  # Prints "Hello everyone"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"avoiding-confusion-with-braces",children:"Avoiding Confusion with Braces"}),"\n",(0,a.jsxs)(n.p,{children:["If a variable is followed by text that could mix with its name, use ",(0,a.jsx)(n.code,{children:"${}"})," to clearly separate it:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'name="Alice"\r\nui_print "$name123"       # Tries to use "name123", not only "name"\r\nui_print "${name}123"     # Prints "Alice123"\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"checking-if-variables-are-defined",children:"Checking If Variables Are Defined"}),"\n",(0,a.jsxs)(n.p,{children:["Sometimes you need to know if a variable has been created. Use ",(0,a.jsx)(n.code,{children:"defined"})," to check if it exists, or ",(0,a.jsx)(n.code,{children:"undefined"})," to check if it doesn\u2019t."]}),"\n",(0,a.jsx)(n.h3,{id:"defined",children:"defined"}),"\n",(0,a.jsx)(n.p,{children:"Checks if one or more variables are set."}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Argument"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"VAR"})}),(0,a.jsx)(n.td,{children:"Variable(s) to check (multiple allowed)"})]})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'name="Alice"\r\nif defined name; then\r\n    ui_print "Name is set"\r\nfi\r\n\r\n# Multiple variables\r\nage="25"\r\nif defined name age; then\r\n    ui_print "Both name and age are set"\r\nfi\n'})}),"\n",(0,a.jsx)(n.h3,{id:"undefined",children:"undefined"}),"\n",(0,a.jsx)(n.p,{children:"Checks if one or more variables are not set."}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Argument"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"VAR"})}),(0,a.jsx)(n.td,{children:"Variable(s) to check (multiple allowed)"})]})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'if undefined score; then\r\n    ui_print "Score is not set"\r\nfi\r\n\r\n# Multiple variables\r\nif undefined score level; then\r\n    ui_print "Score and level are not set"\r\nfi\n'})}),"\n",(0,a.jsx)(n.h3,{id:"practical-example",children:"Practical Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'user="Bob"\r\nif defined user; then\r\n    ui_print "User is $user"\r\nelse\r\n    ui_print "No user defined"\r\nfi\r\n\r\nif undefined points; then\r\n    points="0"  # Set a default value\r\n    ui_print "Points set to $points"\r\nfi\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var s=i(6540);const a={},r=s.createContext(a);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);